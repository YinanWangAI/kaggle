## data: length by site
## Bartlett's K-squared = 0.764, df = 2, p-value = 0.6825
fly.survey
aov(value~method, data = anova.m)
fit <- aov(value~method, data = anova.m)
summary(fit)
fit <- aov(value~region, data = anova.m)
summary(fit)
fit <- aov(value~method * region, data = anova.m)
summary(fit)
fit <- aov(value ~ method * region, data = anova.m)
summary(fit)
# 输入数据
rats <- data.frame(time = c(0.39, 0.45, 0.46, 0.43, 0.72, 0.8, 0.78, 0.92, 0.53, 0.45, 0.63, 0.56, 0.65, 0.71, 0.66, 0.62, 0.36, 0.29, 0.23, 0.33, 0.42, 0.61, 0.79, 1.04, 0.94, 0.85, 0.81, 0.6, 0.76, 0.82, 0.71, 0.65, 0.22, 0.31, 0.28, 0.33, 0.65, 0.67, 0.69, 0.78, 0.43, 0.45, 0.54, 0.48, 0.38, 0.36, 0.41, 0.33), toxicant = gl(3, 16, 48, labels = c("I", "II", "III")), cure = gl(4, 4, 48, labels = c("A", "B", "C", "D")))
# 毒素和治疗方案两因素各自效应分析
op <- par(mfrow = c(1, 2))
plot(time ~ toxicant + cure, data = rats)
rats
rats.aov <- aov(time ~ toxicant * cure, data = rats)
summary(rats.aov)
df <- data.frame(
huoyunliang = c(970602, 985793, 1045899, 1115771, 1180273, 1234810,
1296200, 1278087, 1267200, 1292650),
gongye = c(23924, 26625, 34599, 48402, 70176, 91894, 99595,
113733, 119048, 126111),
nongye = c(7662.1, 8157, 9084.7, 10995.5, 15750.5, 20340.9, 22353.7,
23788.4, 24541.9, 24519.1)
)
cor(df)
df.lm <- lm(huoyuliang ~ gongye + nongye, data = df)
df.lm <- lm(huoyunliang ~ gongye + nongye, data = df)
summary(df.lm)
df.lm <- lm.fit(huoyunliang ~ gongye + nongye, data = df)
?lm.fit
?predict
predict(lm)
predict(df.lm)
df
predict(df.lm, c(130000, 25000))
predict(df.lm, data.frame(gongye = 130000, nongye = 25000))
predict(df.lm, data.frame(gongye = 130000, nongye = 25000), interval="predict")
predict(df.lm, data.frame(gongye = 130000, nongye = 25000), interval="predict", level = 0.99)
5*0.96*0.2 - 5*0.04
156/200*154/156*5*0.2 + 44*5*0.06/200 - 500
156/200*154/156*5*0.2 + 44*5*0.06/200
v1 <- c(103, 8, 12, 5, 26, 9, 2, 16, 2, 11, 17, 2, 21, 9, 26, 8, 2, 1, 6, 11, 3, 8, 3, 1)
sum(v1)
v2 <- c(185, 3, 7, 3, 19, 6, 0, 9, 0, 5, 8, 1, 14, 4, 20, 7, 2, 0, 3, 5, 3, 5, 2, 1)
sum(v2)
312-185
v3 <- c(seq(0, 10), 12, 15, 16, 18, 20, 24, 25, 30, 36, 40, 45, 48, 50, 60)
v3
v2 / 312 * v3
v3 <- c(seq(0, 6), 8, 9, 10, 12, 15, 16, 18, 20, 24, 25, 30, 36, 40, 45, 48, 50, 60)
v2 / 312 * v3
sum(v2 / 312 * v3) * 458000
install.packages(c("BH", "data.table", "digest", "ggplot2", "mgcv", "Rcpp", "stringi"))
library(plot3D)
install.packages('plot3D')
x <- rnorm(100)
y <- rnorm(100)
z <- (x^2 + y^2)^0.5
library(plot3D)
plot3D(x, y, z)
plot3D::points3D(x, y, z)
x <- rnorm(10000)
y <- rnorm(10000)
z <- (x^2 + y^2)^0.5
plot3D::points3D(x, y, z)
x <- unorm(10000)
y <- unorm(10000)
z <- (x^2 + y^2)^0.5
plot3D::points3D(x, y, z)
library(plot3D)
x <- runif(10000)
y <- runif(10000)
z <- (x^2 + y^2)^0.5
plot3D::points3D(x, y, z)
plot(log2(seq(0.1, 10, length.out = 1000)))
x <- seq(0.1, 10, length.out = 1000)
plot(exp(x))
plot(exp(-x))
plot(exp(0.2 * x))
plot(x ^ -1)
plot(x ^ 10)
plot(x ^ 0.5)
?rbeta
x = rbeta(1000, 0.1, 0.1)
plot(x)
x = rbeta(1000, 2, 3)
plot(x)
plot(density(x))
x = rbeta(1000, 0.1, 0.1)
plot(density(x))
600 * (1.1 ^ 10)
600 * (1.05 ^ 10)
100 * (1.05 ^ 5)
11200 + 3200 + 5200
19600 * 12 + 50000
285200 / 12
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) "a" + d
f(10)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) "a" + d
f(10)
library(devtools)
.libPaths()
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
.libPaths()
sum_two <- function(x, y) return(x + y)
sum_two(1, 2)
a <- sum_two
a(1, 2)
sum_two <- function(x, y) {
return(x + y)
}
sum_three <- function(a, b, c) {
foo <- function(a, b, c) {
return(sum_two(a, b) + c)
}
return(foo)
}
sum_three
sum_two <- function(x, y) {
return(x + y)
}
sum_three <- function(a, b, c) {
foo <- function(a, b, c) {
return(sum_two(a, b) + c)
}
return(foo)
}
a <- sum_three()
a(1, 2, 3)
sum_two <- function(x, y) {
return(x + y)
}
sum_three <- function() {
foo <- function(a, b, c) {
return(sum_two(a, b) + c)
}
return(foo)
}
a <- sum_three()
a(1, 2, 3)
a <- c(1, 2, 3)
is.vector(a)
is.atomic(a)
a <- list(1, 2, 3)
a
is.vector(a)
is.atomic(a)
is.list(a)
1 + 5i
is.complex(1)
is.complex(1 + 0i)
is.complex(1 + 5i)
is.integer(1)
is.integer(1L)
is.logical(NA)
is.logical(1)
is.logical(T)
is.integer(NA)
NA_integer_
is.integer(NA_integer_)
c(1, 'a')
c(1L, 'a')
c(1L, 2)
is.integer(c(1L, 2))
is.integer(c(1L, 2L))
typeof(c(1L, 2L))
c(1, c(2, 3))
list(1, c(2, 3))
c(list(1, c(2, 3)))
c(list(1, c(2, 3)), 4)
is.vector(c(list(1, c(2, 3)), 4))
is.atomic(c(list(1, c(2, 3)), 4))
is.list(c(list(1, c(2, 3)), 4))
typeof(c(list(1, c(2, 3)), 4))
str(c(list(1, c(2, 3)), 4))
c(list(1, 2), c(3, 4))
as.vector(c(list(1, 2), c(3, 4)))
unlsit(c(list(1, 2), c(3, 4)))
unlist(c(list(1, 2), c(3, 4)))
a <- c(1, 2, 3)
str(a)
structure(a)
a <- list(c(1, 2, 3), 'a', T)
str(a)
structure(a)
a
attr(a)
attributes(a)
attr(a, "a_name") <- "list.a"
str(a)
structure(a)
a
structure(a)
attributes(a)
x <- c(1, 2, 3)
names(x)
names(a)
x <- factor('a', 'b', 'c')
x
x <- factor(c('a', 'b', 'c'))
x
typeof(x)
class(x)
class(a)
x[1] <- 'd'
x
c(1, x)
x <- factor(c('a', 'b', 'c'))
c(1, x)
list(c(1, x))
list(1, x)
array(matrix(1:9, 3, 3), matrix(1:4, 2, 2))
y <- array(matrix(1:9, 3, 3), matrix(1:4, 2, 2))
y[1]
str(y)
y[[1]]
y[1:9]
y[1:12]
y[, 1]
dim(y)
attributes(y)
y
length(y)
z <- matrix(1:9, 3, 3)
z
length(z)
b <- array(1:12, c(2, 3, 2))
b
str(b)
length(b)
dim(b)
dim(x)
x
dim(y)
is.matrix(b)
is.matrix(z)
is.array(z)
is.array(b)
is.array(y)
l <- list(1:3, "a", T, 1.0) dim(l) <- c(2, 2)
l <- list(1:3, "a", T, 1.0)
dim(l) <- c(2, 2)
l
l[1, 1]
l[1, 2]
df <- data.frame(
x = 1:3,
y = c('a', 'b', 'c')
)
df
str(df)
df <- data.frame(
x = 1:3,
y = c('a', 'b', 'c'),
stringsAsFactors = F
)
str(df)
typeof(df)
class(df)
x <- c(3, 5, 1, 0, 7)
order(x)
x[order(x)]
rank(x)
order(x)
x
sort(x)
x[1.1]
x[1]
x[-1]
x[-c(1, 4)]
x[c(-1, -4)]
x[NA]
x[c(1, NA)]
letters()
letters
LETTERS
x <- list(c(1, 2, 3), 'a', T)
x
x[1]
x[2]
x[1:2]
vals <- outer(1:5, 1:5, FUN = "paste", sep = ",")
vals
outer(1:5, 1:5)
?outer
vals[1]
vals[c(4, 10)]
df
df['x']
str(df['x'])
dt[, 'x']
df[, 'x']
str(df[, 'x'])
try(1)
try(1 / 0)
try(1 / 'a')
a <- try(1 / 'a')
b <- list(a = list(b = list(c = list(d = 1))))
b
b[[c("a", "b", "c", "d")]]
b[[c("a", "b", "c", "de")]]
lm
x <- c(1, 2, 3)
x[T] <- -1
x
x <- c(1, 2, 3)
x[c(T, F)] <- -1
x
df['x']
df[, 'x']
df[] <- df[, 'x']
df
df[] <- df[, 'x']
df
grades <- sample(3, 5, rep = T)
sample(3, 5, rep = T)
sample(3, 5, rep = F)
info <- data.frame(
grade = 1:3,
desc = c("Poor", "Good", "Excellent"),
fail = c(T, F, F)
)
info
match(grades, info$grade)
grades
id <- match(grades, info$grade)
info[id, ]
x <- c(1, 2, 3)
x[order(x)[1]]
x[order(x)[2]]
':'
:
`:`
a <- c(T, F, T)
b <- c(F, T, T)
a & b
a && b
a <- c(T, F, T)
b <- c(T, T, T)
a && b
a & b
xor(a, b)
length(1)
length(T)
length(F)
length(NA)
length(NULL)
data
date
date()
environment(date)
f <- function(x) return(x)
f
environment(f)
body(date)
body(f)
typeof(f)
class(f)
attributes(f)
attributes(date)
sum
.Primitive()
.Primitive
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
j <- function(x) {
y <- 2
function() { c(x, y)
} }
k <- j(1)
k()
foo <- function(a, b) {
if (missing(a)) stop("no a")
if (missing(b)) stop("no b")
return(a + b)
}
foo()
foo(1)
foo(1, 2)
foo <- function(x = ls()) {
a <- 1
return(x)
}
foo()
foo(ls())
NULL > 0
plot
plot.default
"+" <- function(a, b) return(paste(a, b))
1 + 1
rm("+")
1+1
"%+%" <- function(a, b) return(paste(a, b))
'a' %+% 'b'
'a' %+% 'b' %+% 'c'
`%+%` <- function(a, b) return(paste(a, b))
'a' %+% 'b' %+% 'c'
`%+` <- function(a, b) return(paste(a, b))
'a' %+ 'b' %+ 'c'
`%+`(1, 2)
`%+%` <- function(a, b) return(paste(a, b))
'a' %+% 'b' %+% 'c'
"second<-" <- function(x, value) {
x[2] <- value
x
}
x <- 1:10
second(x) <- 5L
x
second(x) <- 'a'
x
library(pryr)
.libPaths()
I(x)
x
mean
sum
methods("mean")
methods("plot")
MyClass <- structure(list(), class = "MyClass")
f <- function(x) {
UseMethod('f')
}
f.MyClass <- function(x) {
print("Call f.MyClass")
}
f(MyClass)
f.MyClass <- function(x) {
print(x)
print("Call f.MyClass")
}
f(MyClass)
plot.fuck <- function(x) {
print('plot fuck')
}
MyFuck <- structure(list(), class = 'fuck')
plot(MyFuck)
class(MyFuck)
test <- list(c(1, 2, 3))
test
class(test)
class(test) <- "fuck"
plot(test)
setClass(
"Person",
slots = list(
name = "chracter",
age = "numeric"
)
)
setClass(
"Person",
slots = list(
name = "character",
age = "numeric"
)
)
setClass(
"Employee",
slots = list(boss = "Person"),
contains = Person
)
setClass(
"Employee",
slots = list(boss = "Person"),
contains = "Person"
)
new("Person", name = "Alice", age = 32)
alice <- new("Person", name = "Alice", age = 32)
john <- new("Employee", name = "john", age = 27, boss = alice)
alice
john
alice@name
library(ggplot2)
.libPaths()
library(ggplot2)
library(randomForest)
library(readr)
install.packages("readr")
library(readr)
set.seed(0)
setwd("~/kaggle/digit_recognizer/")
numTrain <- 10000
numTrees <- 25
train <- read_csv("train.csv")
train <- read_csv("train.csv")
test <- read_csv("test.csv")
rows <- sample(1:nrow(train), numTrain)
labels <- as.factor(train[rows,1])
train <- train[rows,-1]
rf <- randomForest(train, labels, xtest=test, ntree=numTrees)
predictions <- data.frame(ImageId=1:nrow(test), Label=levels(labels)[rf$test$predicted])
head(predictions)
randomForest
